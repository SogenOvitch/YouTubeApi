name: Release

on:
    workflow_run:
        workflows: [Run lint check and unit test]
        types: [completed]
        branches: [main]

jobs:
    get_last_commit_message:
        runs-on: ubuntu-latest
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        outputs:
            last_commit_message: ${{ steps.get_last_commit_message.outputs.last_commit_message }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                ref: main
            - name: Get last commit message
              id: get_last_commit_message
              run: echo "last_commit_message=$(git show -s --format=%s)" >> $GITHUB_OUTPUT
    create_release:
        runs-on: ubuntu-latest
        needs: get_last_commit_message
        if: ${{ !contains(needs.get_last_commit_message.outputs.last_commit_message, '[skip release]') }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                ref: main
                fetch-depth: 0
            - name: Build changelog
              id: build_changelog
              uses: mikepenz/release-changelog-builder-action@v3
              with:
                configuration: ".github/workflows/changelog_configuration.json"
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Get latest version tag
              id: get_latest_tag
              run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
            - uses: mikepenz/action-gh-release@v0.3.0
              with:
                body: ${{ steps.build_changelog.outputs.changelog }}
                tag_name: ${{ steps.get_latest_tag.outputs.latest_tag }}
    build:
      runs-on: ubuntu-latest
      needs: create_release
      permissions:
        actions: write
        contents: read
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Install .NET
          uses: actions/setup-dotnet@v3
        - name: Build package
          run: |
            dotnet pack
            --configuration Release
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
              name: packages
              path: "**/*.nupkg"
    publish:
      runs-on: ubuntu-latest
      needs: build
      permissions:
        actions: read
      steps:
        - name: Install .NET
          uses: actions/setup-dotnet@v3
        - name: Download artifacts
          uses: actions/download-artifact@v3
          with:
            name: packages
        - name: Publish to Nuget
          run: |
            dotnet nuget push **/*.nupkg
            --source "https://api.nuget.org/v3/index.json"
            --api-key ${{ secrets.NUGET_API_KEY }}